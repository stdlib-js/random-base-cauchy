{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/cauchy.js","../lib/factory.js","../lib/index.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar isnan = require( '@stdlib/assert-is-nan' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.5 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( x0, gamma ) {\n\tif ( !isNumber( x0 ) || isnan( x0 ) ) {\n\t\treturn new TypeError( 'invalid argument. `x0` must be a number primitive and not `NaN`. Value: `' + x0 + '`.' );\n\t}\n\tif ( !isPositive( gamma ) ) {\n\t\treturn new TypeError( 'invalid argument. `gamma` must be a positive number. Value: `' + gamma + '`.' );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar tan = require( '@stdlib/math-base-special-tan' );\nvar PI = require( '@stdlib/constants-float64-pi' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Cauchy distribution.\n*\n* @private\n* @param {PRNG} randn - PRNG for normally distributed numbers\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @returns {number} pseudorandom number\n*/\nfunction cauchy( randn, x0, gamma ) {\n\treturn x0 + ( gamma*tan( PI*( randn()-0.5 ) ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cauchy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils-define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar noop = require( '@stdlib/utils-noop' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar randn = require( '@stdlib/random-base-improved-ziggurat' ).factory;\nvar typedarray2json = require( '@stdlib/array-to-json' );\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\nvar cauchy0 = require( './cauchy.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating random numbers from a Cauchy distribution.\n*\n* @param {number} [x0] - location parameter\n* @param {PositiveNumber} [gamma] - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `x0` must be a number\n* @throws {TypeError} `gamma` argument must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var cauchy = factory( 0.0, 1.0 );\n* var v = cauchy();\n* // returns <number>\n*\n* @example\n* var cauchy = factory( -3.0, 0.5, {\n*     'seed': 297\n* });\n* var v = cauchy();\n* // returns <number>\n*/\nfunction factory() {\n\tvar gamma;\n\tvar rnorm;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar x0;\n\n\tif ( arguments.length === 0 ) {\n\t\trnorm = randn();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `%s`.', opts.prng ) );\n\t\t\t}\n\t\t\trnorm = randn({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\trnorm = randn( opts );\n\t\t}\n\t} else {\n\t\tx0 = arguments[ 0 ];\n\t\tgamma = arguments[ 1 ];\n\t\terr = validate( x0, gamma );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `%s`.', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trnorm = randn({\n\t\t\t\t\t'prng': opts.prng\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\trnorm = randn( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trnorm = randn();\n\t\t}\n\t}\n\tif ( x0 === void 0 ) {\n\t\tprng = cauchy2;\n\t} else {\n\t\tprng = cauchy1;\n\t}\n\trand = rnorm.PRNG;\n\n\tsetReadOnly( prng, 'NAME', 'cauchy' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( prng, 'PRNG', rand );\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( x0 === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ x0, gamma ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns pseudorandom number drawn from a Cauchy distribution with bound parameters `x0` and `gamma`.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = cauchy1();\n\t* // returns <number>\n\t*/\n\tfunction cauchy1() {\n\t\treturn cauchy0( rnorm, x0, gamma );\n\t}\n\n\t/**\n\t* Returns pseudorandom number drawn from a Cauchy distribution.\n\t*\n\t* @private\n\t* @param {number} x0 - location parameter\n\t* @param {PositiveNumber} gamma - scale parameter\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = cauchy2( 0.0, 2.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var r = cauchy2( 1.0, -1.5 );\n\t* // returns NaN\n\t*/\n\tfunction cauchy2( x0, gamma ) {\n\t\tif (\n\t\t\tisnan( x0 ) ||\n\t\t\tisnan( gamma ) ||\n\t\t\tgamma <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn cauchy0( rnorm, x0, gamma );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Cauchy distribution pseudorandom numbers.\n*\n* @module @stdlib/random-base-cauchy\n*\n* @example\n* var cauchy = require( '@stdlib/random-base-cauchy' );\n*\n* var v = cauchy( 0.5, 1.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random-base-cauchy' ).factory;\n*\n* var cauchy = factory( 3.0, 2.0, {\n*     'seed': 297\n* });\n*\n* var v = cauchy();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar cauchy = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cauchy, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cauchy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns pseudorandom number drawn from a Cauchy distribution.\n*\n* @name cauchy\n* @type {PRNG}\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = cauchy( 0.0, 2.0 );\n* // returns <number>\n*\n* @example\n* var v = cauchy( 0.0, -1.0 );\n* // returns NaN\n*/\nvar cauchy = factory();\n\n\n// EXPORTS //\n\nmodule.exports = cauchy;\n"],"names":["isNumber","require$$0","isPrimitive","isPositive","require$$1","isnan","require$$2","validate_1","x0","gamma","TypeError","tan","PI","cauchy_1","randn","setReadOnly","setReadOnlyAccessor","setReadWriteAccessor","isObject","require$$3","isFunction","require$$4","hasOwnProp","require$$5","constantFunction","require$$6","noop","require$$7","require$$8","require$$9","factory","typedarray2json","require$$10","format","require$$11","validate","require$$12","cauchy0","require$$13","factory_1","rnorm","opts","rand","prng","err","arguments","length","cauchy2","cauchy1","PRNG","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","seed","seedLength","stateLength","byteLength","state","s","out","name","NAME","params","NaN","cauchy","lib"],"mappings":"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"}